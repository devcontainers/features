name: "PR - Test Updated Features"
on:
  pull_request:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      features: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            anaconda: ./**/anaconda/**
            aws-cli: ./**/aws-cli/**
            azure-cli: ./**/azure-cli/**
            common-utils: ./**/common-utils/**
            conda: ./**/conda/**
            desktop-lite: ./**/desktop-lite/**
            docker-outside-of-docker: ./**/docker-outside-of-docker/**
            docker-in-docker: ./**/docker-in-docker/**
            dotnet: ./**/dotnet/**
            git: ./**/git/**
            git-lfs: ./**/git-lfs/**
            github-cli: ./**/github-cli/**
            go: ./**/go/**
            hugo: ./**/hugo/**
            java: ./**/java/**
            kubectl-helm-minikube: ./**/kubectl-helm-minikube/**
            node: ./**/node/**
            nvidia-cuda: ./**/nvidia-cuda/**
            oryx: ./**/oryx/**
            php: ./**/php/**
            powershell: ./**/powershell/**
            python: ./**/python/**
            ruby: ./**/ruby/**
            rust: ./**/rust/**
            sshd: ./**/sshd/**
            terraform: ./**/terraform/**
            nix: ./**/nix/**

  test:
    needs: [detect-changes]
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        features: ${{ fromJSON(needs.detect-changes.outputs.features) }}
        baseImage:
          [
            "ubuntu:focal",
            "ubuntu:jammy",
            "debian:11",
            "debian:12",
            "mcr.microsoft.com/devcontainers/base:ubuntu",
            "mcr.microsoft.com/devcontainers/base:debian",
            "mcr.microsoft.com/devcontainers/base:noble"
          ]
        exclude:
          - features: oryx
            baseImage: ubuntu:jammy
          - features: oryx
            baseImage: mcr.microsoft.com/devcontainers/base:ubuntu
    steps:
      - uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Generating tests for '${{ matrix.features }}' against '${{ matrix.baseImage }}'"
        run: devcontainer features test  --skip-scenarios -f ${{ matrix.features }} -i ${{ matrix.baseImage }} .

  test-scenarios:
    needs: [detect-changes]
    runs-on: devcontainer-image-builder-ubuntu
    continue-on-error: true
    strategy:
      matrix:
        features: ${{ fromJSON(needs.detect-changes.outputs.features) }}
    steps:
      - uses: actions/checkout@v4

      - name: "Install latest devcontainer CLI"
        run: npm install -g @devcontainers/cli

      - name: "Testing '${{ matrix.features }}' scenarios"
        run: devcontainer features test -f ${{ matrix.features }} --skip-autogenerated  .

            - name: terraform-plan-storage
  # You may pin to the exact commit or the version.
  # uses: cloudposse/github-action-terraform-plan-storage@55b5d342c1eefee79e661b2709e91b19b4361c6d
  uses: cloudposse/github-action-terraform-plan-storage@1.14.0
  with:
    # which action to perform. Valid values are: 'storePlan', 'getPlan', 'taintPlan'
    action: # default is storePlan
    # the name of the Azure Blob Storage account to store the plan file
    blobAccountName: # optional
    # the name of the Azure Blob Storage container to store the plan file
    blobContainerName: # optional
    # the name of the S3 bucket to store the plan file
    bucketName: # optional, default is terraform-plan-storage
    # Commit SHA to use for fetching plan
    commitSHA: # optional, default is 
    # the name of the component corresponding to the plan file
    component: # optional
    # the connection string to the CosmosDB account to store the metadata
    cosmosConnectionString: # optional
    # the name of the CosmosDB container to store the metadata
    cosmosContainerName: # optional
    # the name of the CosmosDB database to store the metadata
    cosmosDatabaseName: # optional
    # the endpoint of the CosmosDB account to store the metadata
    cosmosEndpoint: # optional
    # Fail if plan is missing
    failOnMissingPlan: # optional, default is true
    # the type of repository where the plan file is stored. Valid values are: 'dynamo', 'cosmodb'
    metadataRepositoryType: # optional, default is dynamo
    # path to the Terraform plan file. Required for 'storePlan' and 'getPlan' actions
    planPath: # optional
    # the type of repository where the metadata is stored. Valid values are: 's3', 'azureblob'
    planRepositoryType: # optional, default is s3
    # the name of the stack corresponding to the plan file
    stack: # optional
    # the name of the dynamodb table to store metadata
    tableName: # optional, default is terraform-plan-storage
          
